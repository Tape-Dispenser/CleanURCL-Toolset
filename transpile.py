import URCL
import os
import time

def info():
    print('Transpiles URCL Code')
    print('')
    print('Available options:')
    print('\t-o <file_path> : declare output file path (default prints to console)')
    print('\t-a <file_path> : architecture definition file to use')
    print('')
    print('\t-d : enable debug logging')
    print('\t-h : display this message')
    return

debugLogging = False

class Instruction:
    string = None
    instNum = None


def transpile(path, options=[]):
    global debugLogging,endCommand
    outPath = './output/out.urcl'
    archPath = './translations/core-er_translations.json'
    tempPath = path.split('/')
    tempPath[-1] = "." + tempPath[-1]
    objectFile = '/'.join(tempPath)

    if path == "":                                                      # if file is blank just print info and exit
        info()
        return 'success'

    # argument handling loop
    for c,v in enumerate(options):
        next = None
        if c < options.len() - 1:
            next = options[c + 1]
        match (v.lower(), next):
            case ('-a', *path):
                if path == None:
                    raise Exception('Error parsing transpile command: -a flag used but no output path provided')
                # argument immediately after -o should be a file path
                if not (os.path.isfile(path)):
                    raise Exception('Error parsing transpile command: -a flag used but no output path provided')
                elif not os.path.exists(path):
                    raise Exception(f'Error parsing transpile command: architecture file "{path}" does not exist.')
                
                break
            
            case ('-o', *path):
                if path == None:
                    raise Exception('Error parsing transpile command: --o flag used but no output path provided')
                # argument immediately after -o should be a file path
                if not (os.path.isfile(path)):
                    raise Exception('Error parsing transpile command: --o flag used but no output path provided')
                elif not os.path.exists(path):
                    raise Exception(f'Error parsing transpile command: architecture file "{path}" does not exist.')
                outPath = path
                break
                    
            case ('-h', *next):
                info()
                return
                
            case ('-d', *next):
                debugLogging = True
                break

            case _:
                raise Exception(f'Error parsing transpile command: Unrecognized option "{v}"')


    # calculate real line num while packaging everything back into a list (this might get moved to parse later)
        # TODO: make it so objectFile doesn't need to be passed as a file
        # and instead just passes the original list generated by clean. 
    if os.path.exists(objectFile):
        lines = []
        with open (objectFile, 'r') as f:
            for line in f.readlines():
                lineClass = URCL.Line('', 0)
                lineClass.fromBase64(line)
                lines.append(lineClass)

        for i, l in enumerate(lines):
            l:URCL.Line.realLineNum = i

    
            
    else:
        if debugLogging:
            print(f"URCL object file not found, cleaning input code now.")
        x = URCL.clean(path, ["--o", "./output/temp.urcl"])
        transpile(x, options)
        # generate line class file for transpile to use